# -*- coding: utf-8 -*-
"""UNEToptic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15BmqsIXm3ya6A0jNt82MYYr_iDkTOHk9
"""

import tensorflow as tf
import os
import random
import numpy as np
import cv2

from tqdm import tqdm 

from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt

seed = 42
np.random.seed = seed

IMG_WIDTH = 256 #128
IMG_HEIGHT = 256 #128
IMG_CHANNELS = 3

directory = '/content/drive/My Drive/retpy'

#dir_train_path = directory + '/train_data'
#dir_test_path = directory + '/test_data'
#dir_train_labels_path = directory + '/train_labels' 
#dir_test_labels_path = directory + '/test_labels'

dir_train_path = directory + '/NORMAL'
dir_train_labels_path = directory + '/lungs_data'

dir_test_path = directory + '/lungs'
dir_test_labels_path = directory + '/unwanted_masks'

#train_ids = next(os.walk(TRAIN_PATH))[1]
#test_ids = next(os.walk(TEST_PATH))[1]
numbtrain = 987 #443
numbtest = 354 #77

X_train = np.zeros((numbtrain, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
Y_train = np.zeros((numbtrain, IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)

X_test = np.zeros((numbtest, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
Y_test = np.zeros((numbtest, IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)

#X_train_list = []
#Y_train_list = []
#X_test_list = []

def imgtoXtrainarr(image_path, image_name, n1):

  img1 = cv2.imread(image_path)[:,:,:IMG_CHANNELS]
  #img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img1 = resize(img1, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_train_list.append(img)
  X_train[n1] = img1

def imgtoYtrainarr(image_path, image_name, n2):

  img2 = cv2.imread(image_path)[:,:,:1]
  #img2[:,:,1]=0
  #img2[:,:,0]=0
  #img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img2 = resize(img2, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #Y_train_list.append(img)
  Y_train[n2] = img2

def imgtoXtestarr(image_path, image_name, n3):

  img3 = cv2.imread(image_path)[:,:,:IMG_CHANNELS]
  #img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img3 = resize(img3, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_test_list.append(img)
  X_test[n3] = img3

def imgtoYtestarr(image_path, image_name, n4):

  img4 = cv2.imread(image_path)[:,:,:1]
  #img2[:,:,1]=0
  #img2[:,:,0]=0
  #img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img4 = resize(img4, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #Y_train_list.append(img)
  Y_test[n4] = img4

nm = 0
n1 = 0
n2 = 0
n3 = 0
n4 = 0

for files1 in sorted(os.listdir(dir_train_path)):

  imgtoXtrainarr(dir_train_path+'/'+files1, files1, n1)
  n1 = n1 + 1
  nm = nm + 1

for files2 in sorted(os.listdir(dir_train_labels_path)):

  imgtoYtrainarr(dir_train_labels_path+'/'+files2, files2, n2)
  n2 = n2 + 1

for files3 in sorted(os.listdir(dir_test_path)):

  imgtoXtestarr(dir_test_path+'/'+files3, files3, n3)
  n3 = n3 + 1

for files4 in sorted(os.listdir(dir_test_labels_path)):

  imgtoYtestarr(dir_test_labels_path+'/'+files4, files4, n4)
  n4 = n4 + 1


#X_train = np.array(X_train_list, dtype=np.uint8)
#Y_train = np.array(Y_train_list, dtype=np.bool)
#X_test = np.array(X_test_list, dtype=np.uint8)

#X_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
#Y_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)

#print('Resizing training images and masks')
#for n, id_ in tqdm(enumerate(train_ids), total=len(train_ids)):   
    #path = TRAIN_PATH + id_
    #img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS]  
    #img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
    #X_train[n] = img  #Fill empty X_train with values from img
    #mask = np.zeros((IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)
    #for mask_file in next(os.walk(path + '/masks/'))[2]:
        #mask_ = imread(path + '/masks/' + mask_file)
        #mask_ = np.expand_dims(resize(mask_, (IMG_HEIGHT, IMG_WIDTH), mode='constant',  preserve_range=True), axis=-1)
        #mask = np.maximum(mask, mask_)  
            
    #Y_train[n] = mask   

# test images
#X_test = np.zeros((len(test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
#sizes_test = []
#print('Resizing test images') 
#for n, id_ in tqdm(enumerate(test_ids), total=len(test_ids)):
    #path = TEST_PATH + id_
    #img = imread(path + '/images/' + id_ + '.png')[:,:,:IMG_CHANNELS]
    #sizes_test.append([img.shape[0], img.shape[1]])
    #img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
    #X_test[n] = img

#print('Done!')

image_x = random.randint(0, nm)
imshow(X_train[image_x])
plt.show()
imshow(np.squeeze(Y_train[image_x]))
plt.show()




#Build the model
inputs = tf.keras.layers.Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))
s = tf.keras.layers.Lambda(lambda x: x / 255)(inputs)

#Contraction path
c1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(s)
c1 = tf.keras.layers.Dropout(0.1)(c1)
c1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c1)
p1 = tf.keras.layers.MaxPooling2D((2, 2))(c1)

c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p1)
c2 = tf.keras.layers.Dropout(0.1)(c2)
c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c2)
p2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)
 
c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p2)
c3 = tf.keras.layers.Dropout(0.2)(c3)
c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c3)
p3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)
 
c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p3)
c4 = tf.keras.layers.Dropout(0.2)(c4)
c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c4)
p4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c4)
 
c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)
c5 = tf.keras.layers.Dropout(0.3)(c5)
c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)

#Expansive path 
u6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c5)
u6 = tf.keras.layers.concatenate([u6, c4])
c6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u6)
c6 = tf.keras.layers.Dropout(0.2)(c6)
c6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c6)
 
u7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c6)
u7 = tf.keras.layers.concatenate([u7, c3])
c7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u7)
c7 = tf.keras.layers.Dropout(0.2)(c7)
c7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c7)
 
u8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(c7)
u8 = tf.keras.layers.concatenate([u8, c2])
c8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u8)
c8 = tf.keras.layers.Dropout(0.1)(c8)
c8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c8)
 
u9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(c8)
u9 = tf.keras.layers.concatenate([u9, c1], axis=3)
c9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u9)
c9 = tf.keras.layers.Dropout(0.1)(c9)
c9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c9)
 
outputs = tf.keras.layers.Conv2D(1, (1, 1), activation='sigmoid')(c9)
 
model = tf.keras.Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

################################
#Modelcheckpoint
checkpointer = tf.keras.callbacks.ModelCheckpoint('model_for_opticdisc.h5', verbose=1, save_best_only=True)

callbacks = [tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),tf.keras.callbacks.TensorBoard(log_dir='logs')]

results = model.fit(X_train, Y_train, validation_split=0.1, batch_size=16, epochs=25)#, callbacks=callbacks)

####################################

idx = random.randint(0, len(X_train))


preds_train = model.predict(X_train[:int(X_train.shape[0]*0.9)], verbose=1)
preds_val = model.predict(X_train[int(X_train.shape[0]*0.9):], verbose=1)
preds_test = model.predict(X_test, verbose=1)

 
preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)
preds_test_t = (preds_test > 0.5).astype(np.uint8)


# Perform a sanity check on some random training samples
ix = random.randint(0, len(preds_train_t))
imshow(X_train[ix])
plt.show()
imshow(np.squeeze(Y_train[ix]))
plt.show()
imshow(np.squeeze(preds_train_t[ix]))
plt.show()

# Perform a sanity check on some random validation samples
ix = random.randint(0, len(preds_val_t))
imshow(X_train[int(X_train.shape[0]*0.9):][ix])
plt.show()
imshow(np.squeeze(Y_train[int(Y_train.shape[0]*0.9):][ix]))
plt.show()
imshow(np.squeeze(preds_val_t[ix]))
plt.show()

# Perform a sanity check on some random test samples
ix = random.randint(0, len(preds_test_t))
imshow(X_test[ix])
plt.show()
imshow(np.squeeze(Y_test[ix]))
plt.show()
imshow(np.squeeze(preds_test_t[ix]))
plt.show()

import tensorflow as tf
import os
import random
import numpy as np
import cv2

from tqdm import tqdm 

from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt

seed = 42
np.random.seed = seed

IMG_WIDTH = 128
IMG_HEIGHT = 128
IMG_CHANNELS = 3

directory = '/content/drive/My Drive/retpy'

dir_train_path = directory + '/train_data'
dir_test_path = directory + '/test_data'
dir_train_labels_path = directory + '/train_labels' 
#dir_test_labels_path = directory + '/test_labels'

#train_ids = next(os.walk(TRAIN_PATH))[1]
#test_ids = next(os.walk(TEST_PATH))[1]

X_train = np.zeros((443, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
Y_train = np.zeros((443, IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)

X_test = np.zeros((77, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)

#X_train_list = []
#Y_train_list = []
#X_test_list = []

def imgtoXtrainarr(image_path, image_name, n1):

  img1 = cv2.imread(image_path)
  #img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img1 = resize(img1, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_train_list.append(img)
  X_train[n1] = img1

def imgtoYtrainarr(image_path, image_name, n2):

  img2 = cv2.imread(image_path)[:,:,:1]
  #img2[:,:,1]=0
  #img2[:,:,0]=0
  #img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img2 = resize(img2, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #Y_train_list.append(img)
  Y_train[n2] = img2

def imgtoXtestarr(image_path, image_name, n3):

  img3 = cv2.imread(image_path)
  #img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img3 = resize(img3, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_test_list.append(img)
  X_test[n3] = img3

nm = 0
n1 = 0
n2 = 0
n3 = 0

for files1 in sorted(os.listdir(dir_train_path)):

  print(files1)
  #imgtoXtrainarr(dir_train_path+'/'+files1, files1, n1)
  #n1 = n1 + 1
  #nm = nm + 1

#for files2 in os.listdir(dir_train_labels_path):

  #imgtoYtrainarr(dir_train_labels_path+'/'+files2, files2, n2)
  #n2 = n2 + 1

#for files3 in os.listdir(dir_test_path):

  #imgtoXtestarr(dir_test_path+'/'+files3, files3, n3)
  #n3 = n3 + 1

import tensorflow as tf
import os
import random
import numpy as np
import cv2

from tqdm import tqdm 

from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt

seed = 42
np.random.seed = seed

IMG_WIDTH = 128
IMG_HEIGHT = 128
IMG_CHANNELS = 3

directory = '/content/drive/My Drive/retpy'

dir_train_path = directory + '/train_data'
dir_test_path = directory + '/test_data'
dir_train_labels_path = directory + '/train_labels' 
#dir_test_labels_path = directory + '/test_labels'

#train_ids = next(os.walk(TRAIN_PATH))[1]
#test_ids = next(os.walk(TEST_PATH))[1]

X_train = np.zeros((443, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
Y_train = np.zeros((443, IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)

X_test = np.zeros((77, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)

#X_train_list = []
#Y_train_list = []
#X_test_list = []

def imgtoXtrainarr(image_path, image_name, n1):

  img1 = cv2.imread(image_path)
  #img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img1 = resize(img1, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_train_list.append(img)
  X_train[n1] = img1

def imgtoYtrainarr(image_path, image_name, n2):

  img2 = cv2.imread(image_path)[:,:,:1]
  #img2[:,:,1]=0
  #img2[:,:,0]=0
  #img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img2 = resize(img2, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #Y_train_list.append(img)
  Y_train[n2] = img2

def imgtoXtestarr(image_path, image_name, n3):

  img3 = cv2.imread(image_path)
  #img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2GRAY)
  #img = cv2.resize(img, (IMG_HEIGHT, IMG_WIDTH), interpolation = cv2.INTER_CUBIC)
  img3 = resize(img3, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
  #X_test_list.append(img)
  X_test[n3] = img3

nm = 0
n1 = 0
n2 = 0
n3 = 0

#for files1 in os.listdir(dir_train_path):

  #imgtoXtrainarr(dir_train_path+'/'+files1, files1, n1)
  #n1 = n1 + 1
  #nm = nm + 1

for files2 in sorted(os.listdir(dir_train_labels_path)):

  print(files2)
  #imgtoYtrainarr(dir_train_labels_path+'/'+files2, files2, n2)
  #n2 = n2 + 1

#for files3 in os.listdir(dir_test_path):

  #imgtoXtestarr(dir_test_path+'/'+files3, files3, n3)
  #n3 = n3 + 1

np.save('/content/drive/MyDrive/retpy/X_train',X_train)
np.save('/content/drive/MyDrive/retpy/X_test',X_test)
np.save('/content/drive/MyDrive/retpy/Y_train',Y_train)
np.save('/content/drive/MyDrive/retpy/Y_test',Y_test)